---
- name: Ensure servers are provisioned in vpc
  hosts: localhost
  gather_facts: false
  tags:
    - provision

  tasks:
  - name: Find last application images
    ec2_ami_facts:
      owners: self
      region: "{{ cli_ec2region }}"
      filters:
        "tag:Name": "{{ g_aminame }}"
        "tag:Build": "{{ g_aminame }}-{{ cli_ci_pipeline_id }}"
        "tag:OpCo": "{{ g_opco }}"
    register: ami_find

  # - name: create a cloudformation stack
  #   cloudformation:
  #     stack_name: "{{ cli_stackname }}"
  #     state: "present"
  #     region: "{{ cli_ec2region }}"
  #     disable_rollback: true
  #     template: "{{ cli_awstemplate }}"
  #     template_parameters:
  #       KeyName: "{{ g_keyname }}"
  #       AMI: "{{ ami_find.images[0].image_id }}"
  #       AWSRegion: "{{ cli_ec2region }}"
  #       Environment: "{{ cli_deploymentenv }}"
  #   register: stack

  - name: create a terraform deploy
    terraform:
      project_path: '{{ cli_tf }}'
      state: present
      variables:
        AMI: "{{ ami_find.images[0].image_id }}"
        stackname: "{{ cli_stackname }}"
        environment: "{{ cli_deploymentenv }}"
    register: stack

  - name: Get facts about all the newly created instances
    ec2_instance_facts:
      region: "{{ cli_ec2region }}"
      filters:
        instance-state-name: running
        "tag:stackname": "{{ cli_stackname }}"
    register: ec2_facts

  # - name: Get facts about all the newly created instances
  #   ec2_instance_facts:
  #     region: "{{ cli_ec2region }}"
  #     filters:
  #       instance-state-name: running
  #       "tag:aws:cloudformation:stack-name": "{{ cli_stackname }}"
  #   register: ec2_facts

  # - name: Show stack outputs
  #   debug: msg="Got instances {{ec2_facts}}"
  # - name: Show stack outputs
  #   debug: msg="Got instances {{item.public_ip_address}}"
  #   with_items: "{{ ec2_facts.instances }}"

  - name: Ensure all instances are ready
    wait_for:
      port: 22
      host: "{{ item.public_ip_address }}"
      search_regex: OpenSSH
    with_items: "{{ ec2_facts.instances }}"

  # - name: Get facts about core instances
  #   ec2_instance_facts:
  #     region: "{{ cli_ec2region }}"
  #     filters:
  #       instance-state-name: running
  #       "tag:aws:cloudformation:stack-name": "{{ cli_stackname }}"
  #       "tag:Role": "Core Instance"
  #   register: ec2_core_facts

  # - name: Build group of core instances
  #   add_host:
  #     name: "{{ item.public_ip_address }}"
  #     groups: web
  #     ansible_user: centos
  #     ansible_host: "{{ item.public_ip_address }}"
  #     ansible_ssh_private_key_file: "{{ g_ec2_private_key_file | default(omit) }}"
  #   with_items: "{{ ec2_core_facts.instances }}"