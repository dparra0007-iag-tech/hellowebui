---
- name: Ensure servers are provisioned in vpc
  hosts: localhost
  gather_facts: false
  tags:
    - provision

  tasks:
  - name: create a cloudformation stack
    cloudformation:
      stack_name: "{{ stackname }}"
      state: "present"
      region: "{{ ec2region }}"
      disable_rollback: true
      template: "{{ awstemplate }}"
      template_parameters:
        KeyName: "{{ keyname }}"
        AMI: "{{ ami }}"
        AWSRegion: "{{ ec2region }}"
    register: stack

  - name: Get facts about all the newly created instances
    ec2_instance_facts:
      region: "{{ ec2region }}"
      filters:
        instance-state-name: running
        "tag:aws:cloudformation:stack-name": "{{ stackname }}"
    register: ec2_facts

  # - name: Show stack outputs
  #   debug: msg="Got instances {{ec2_facts}}"
  # - name: Show stack outputs
  #   debug: msg="Got instances {{item.public_ip_address}}"
  #   with_items: "{{ ec2_facts.instances }}"

  - name: Ensure all instances are ready
    wait_for:
      port: 22
      host: "{{item.public_ip_address}}"
      search_regex: OpenSSH
    with_items: "{{ ec2_facts.instances }}"

  - name: Get facts about core instances
    ec2_instance_facts:
      region: "{{ ec2region }}"
      filters:
        instance-state-name: running
        "tag:aws:cloudformation:stack-name": "{{ stackname }}"
        "tag:Role": "Core Instance"
    register: ec2_core_facts

  - name: Build group of core instances
    add_host:
      name: "{{item.public_ip_address}}"
      groups: web
      ansible_user: centos
      ansible_host: "{{item.public_ip_address}}"
      # ansible_ssh_private_key_file: "{{ ec2_private_key_file | default(omit) }}"
    with_items: "{{ ec2_core_facts.instances }}"