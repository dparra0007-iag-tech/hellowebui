---
- name: Build web application hosted in apache server
  hosts: localhost

  tasks:
    - name: Create temporary EC2 instance
      ec2:
        key_name: "{{ g_keyname }}"
        region: "{{ cli_ec2region }}"
        instance_type: t2.micro
        image: "{{ g_ami }}"
        wait: yes
        group: WebServers
        count: 1
        vpc_subnet_id: subnet-c04a34a8
        assign_public_ip: yes
      register: ec2

    - name: Wait for SSH to come up
      wait_for:
        port: 22
        host: "{{ item.public_ip }}"
        search_regex: OpenSSH
      with_items: "{{ ec2.instances }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groups: web
        ansible_user: centos
        ansible_host: "{{ item.public_ip }}"
        ansible_ssh_private_key_file: "{{ g_ec2_private_key_file | default(omit) }}"
      with_items: "{{ ec2.instances }}"

- name: Build application
  hosts: localhost

  tasks:
    - name: Check for hellowebui application
      stat: path=../hellowebui/
      register: path

    - name: Build locally
      command: cp ../hellowebui/index.html ./roles/apache-simple/templates/index.html.j2
      delegate_to: localhost
      when: path.stat.exists


- name: Deploy and run the apache server
  hosts: web
  become: true
  roles:
    - role: apache-simple

- name: Register and destroy
  hosts: localhost

  tasks:
    - name: Stop instances
      ec2:
        instance_ids: '{{ ec2.instance_ids }}'
        region: "{{ cli_ec2region }}"
        vpc_subnet_id: subnet-c04a34a8
        assign_public_ip: yes
        state: stopped
        wait: True

    - name: Find application images
      ec2_ami_facts:
        owners: self
        region: "{{ cli_ec2region }}"
        filters:
          "tag:Name": "{{ g_aminame }}"
          "tag:OpCo": "{{ g_opco }}"
      register: ami_find

    # - name: Show stack outputs
    #   debug: msg="Got instances {{ ami_find.images }}"

    - name: Now get the latest one
      set_fact:
        latest_ami: >
          {{ ami_find.images | sort(attribute='tags.Version') | last }}
      register: ami

    # - name: Show stack outputs
    #   debug: msg="Got instances {{ ami.ansible_facts.latest_ami.tags.Version }}"

    - name: Get new version number
      make:
        chdir: ../
        target: version
        params:
          CI_PIPELINE_ID: "{{ cli_ci_pipeline_id }}"
          CI_COMMIT_MESSAGE: "{{ cli_ci_commit_message }}"
          PREVIOUS: "{{ ami.ansible_facts.latest_ami.tags.Version }}"
      register: version

    # - name: Show stack outputs
    #   debug: msg="Version {{ version.stdout_lines[0] }}"

    # - name: Show stack outputs
    #   debug: "{{ lookup('env', 'PWD') }}"

    - name: Register AMI
      ec2_ami:
        instance_id: "{{ item.id }}"
        region: "{{ cli_ec2region }}"
        wait: yes
        name: "{{ g_aminame }}-{{ version.stdout_lines[0] }}"
        tags:
          Name: "{{ g_aminame }}"
          Service: Core Instance
          Version: "{{ version.stdout_lines[0] }}"
          OpCo: "{{ g_opco }}"
          Build: "{{ g_aminame }}-{{ cli_ci_pipeline_id }}"
      with_items: "{{ ec2.instances }}"

    - name: Terminate instances that were previously build
      ec2:
        state: 'absent'
        instance_ids: '{{ ec2.instance_ids }}'
        region: "{{ cli_ec2region }}"
      with_items: "{{ ec2.instances }}"