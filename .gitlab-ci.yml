image: iaghcp-docker-technical-architecture.jfrog.io/docker:1.0.0

services:
  - name: iaghcp-docker-technical-architecture.jfrog.io/docker-dind:1.0.0
    alias: docker

stages:
- build code
- test code
# - build application
# - push templates
- test application
- deploy
- regression test deploy

variables:
  TOWER_CLI_HOST: $TOWER_CLI_HOST
  TOWER_CLI_USERNAME: $TOWER_CLI_USERNAME
  TOWER_CLI_PASSWORD: $TOWER_CLI_PASSWORD

build_code:
  stage: build code
  script:
    - cp ./hellowebui/index.html ./infrastructure/roles/apache-simple/templates/index.html.j2

# build_service:
#   stage: build application
#   image: iaghcp-docker-technical-architecture.jfrog.io/packer:1.0.0
#   script:
#     - cd ./gofrontend
#     - rm -Rf /home/gitlab-runner/VirtualBox\ VMs/
#     - packer build
#      -var "version=$CI_PIPELINE_ID" 
#      -var "access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID}" 
#      -var "secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}" template.packer
#   dependencies:
#     - build_code
#   tags:
#     - iaas

static_test_service:
  stage: test code
  image: iaghcp-docker-technical-architecture.jfrog.io/sonar-scanner/ansible:1.0.0
  # variables:
  #   PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
  script:
    - ansible-lint ./infrastructure/site.yml
    # Sonarcloud doesn't support ansible lint, but sonarqube does.
    # Until being provided by sonarqube, the scan will be done without conar integration
    # - sonar-scanner
    #  -Dsonar.projectKey=${PROJECT_KEY//[\/]/_} 
    #  -Dsonar.projectName=$CI_PROJECT_NAME 
    #  -Dsonar.branch=$CI_COMMIT_REF_NAME 
    #  -Dsonar.projectVersion=$CI_JOB_ID 
    #  -Dsonar.sources=./ 
    #  -Donar.eslint.reportPaths=report.json 
    #  -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
    #  -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
    #  -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
  except:
    - triggers


functional_test_service:
  stage: test application
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode/maven:3.0.1
  before_script:
    - tower-cli config host $TOWER_CLI_HOST
    - tower-cli config username $TOWER_CLI_USERNAME
    - tower-cli config password $TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION="us-west-1"
  script:
    - tower-cli job launch --job-template site-prov --extra-vars="ec2region=$AWS_DEFAULT_REGION awstemplate=aws.test.template stackname=HelloWebuiTest deploymentenv=staging" --wait

    - mvn clean package -f ./hellowebui-functional-test
    - SUT_IP="$(aws ec2 describe-instances --filters "Name=tag:Role,Values=Core Instance" "Name=tag:aws:cloudformation:stack-name,Values=HelloWebuiTest" "Name=instance-state-name,Values=running" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
    - TESTER_IP="$(aws ec2 describe-instances --filters "Name=tag:Role,Values=Test Instance" "Name=tag:aws:cloudformation:stack-name,Values=HelloWebuiTest" "Name=instance-state-name,Values=running" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
    - java -jar ./hellowebui-functional-test/target/hellowebui-functional-test-0.0.1-SNAPSHOT.jar $SUT_IP $TESTER_IP

    - tower-cli job launch --job-template site-deprov --extra-vars="ec2region=$AWS_DEFAULT_REGION stackname=HelloWebuiTest"

deploy_staging:
  stage: deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode:2.2.0
  before_script:
    - tower-cli config host $TOWER_CLI_HOST
    - tower-cli config username $TOWER_CLI_USERNAME
    - tower-cli config password $TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_DEFAULT_REGION="us-west-1"
  script:
    - tower-cli job launch --job-template site-prov --extra-vars="ec2region=$AWS_DEFAULT_REGION awstemplate=aws.template stackname=HelloWebui deploymentenv=staging" --wait
  environment:
    name: staging

rollback_staging:
  stage: regression test deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode:2.2.0
  before_script:
    - tower-cli config host $TOWER_CLI_HOST
    - tower-cli config username $TOWER_CLI_USERNAME
    - tower-cli config password $TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_DEFAULT_REGION="us-west-1"
  script:
    - cd ./infrastructure
    - tower-cli job launch --job-template site-deprov --extra-vars="ec2region=$AWS_DEFAULT_REGION stackname=HelloWebui"
  environment:
    name: staging
  when: manual