image: iaghcp-docker-technical-architecture.jfrog.io/docker:1.0.0

services:
  - name: iaghcp-docker-technical-architecture.jfrog.io/docker-dind:1.0.0
    alias: docker

stages:
# - build code
- test code
- build application
- review application
- test application
- deploy
- regression test deploy
- cleanup

variables:
  TOWER_CLI_HOST: $TOWER_CLI_HOST
  TOWER_CLI_USERNAME: $TOWER_CLI_USERNAME
  TOWER_CLI_PASSWORD: $TOWER_CLI_PASSWORD

  STACKNAME_STG: hellowebui-staging

# build_code:
#   stage: build code
#   script:
#     - cp ./hellowebui/index.html ./infrastructure/roles/apache-simple/templates/index.html.j2

# build_service:
#   stage: build application
#   image: iaghcp-docker-technical-architecture.jfrog.io/packer:1.0.0
#   script:
#     - cd ./gofrontend
#     - rm -Rf /home/gitlab-runner/VirtualBox\ VMs/
#     - packer build
#      -var "version=$CI_PIPELINE_ID" 
#      -var "access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID}" 
#      -var "secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}" template.packer
#   dependencies:
#     - build_code
#   tags:
#     - iaas

static_test_service:
  stage: test code
  image: iaghcp-docker-technical-architecture.jfrog.io/sonar-scanner/ansible:1.0.0
  script:
    - ansible-lint ./infrastructure/site.yml
    - ansible-lint ./infrastructure/build.yml
  except:
    - triggers

build_application:
  stage: build application
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode:3.0.0
  before_script:
    - tower-cli config host $TOWER_CLI_HOST
    - tower-cli config username $TOWER_CLI_USERNAME
    - tower-cli config password $TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_DEFAULT_REGION="us-west-1"
  script:
    - tower-cli job launch --job-template site-build --extra-vars="cli_ec2region=us-west-1 cli_aminame=hellowebui cli_ci_pipeline_id='$CI_PIPELINE_ID' cli_ci_commit_message='$CI_COMMIT_MESSAGE'" --wait -v
  artifacts:
    paths:
      - ${PWD}/infrastructure/version.var

.deploy: &deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode:3.0.0
  script:
    - tower-cli config host $ENV_TOWER_CLI_HOST
    - tower-cli config username $ENV_TOWER_CLI_USERNAME
    - tower-cli config password $ENV_TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false
    - export AWS_DEFAULT_REGION=$ENV_AWS_DEFAULT_REGION

    - tower-cli job launch 
        --job-template site-prov 
        --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME cli_deploymentenv=$ENVIRONMENT cli_action=deployment cli_ci_pipeline_id='$CI_PIPELINE_ID'"
        --tags "provision,provision-core,setup-core" 
        --wait
    # - ansible-playbook site-prov --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME cli_deploymentenv=$ENVIRONMENT cli_action=deployment cli_ci_pipeline_id='$CI_PIPELINE_ID'" 
    #     --tags "provision,provision-core,setup-core" 
    #     --wait

review:
  <<: *deploy
  stage: review application
  variables:
    ENV_TOWER_CLI_HOST: $TOWER_CLI_HOST
    ENV_TOWER_CLI_USERNAME: $TOWER_CLI_USERNAME
    ENV_TOWER_CLI_PASSWORD: $TOWER_CLI_PASSWORD
    ENV_AWS_DEFAULT_REGION: "us-west-1"
    STACKNAME: $CI_PROJECT_NAME-$CI_BUILD_REF_NAME
    ENVIRONMENT: $CI_PROJECT_NAME-$CI_BUILD_REF_NAME

  environment:
    name: $CI_BUILD_REF_NAME
    # url: http://userapi-apigateway-$CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME.$OPENSHIFT_DOMAIN
    on_stop: stop-review
  only:
    - branches
  except:
    - master

functional_test_service:
  stage: test application
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode/maven:4.0.0
  before_script:
    - tower-cli config host $TOWER_CLI_HOST
    - tower-cli config username $TOWER_CLI_USERNAME
    - tower-cli config password $TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION="us-west-1"
  script:
    - tower-cli job launch 
      --job-template site-prov 
      --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=HelloWebuiTest cli_deploymentenv=test cli_action=test cli_ci_pipeline_id='$CI_PIPELINE_ID'" 
      --tags "provision,provision-core,setup-core,provision-test,setup-test" 
      --wait

    - mvn clean package -f ./hellowebui-functional-test
    - SUT_IP="$(aws ec2 describe-instances --filters "Name=tag:Role,Values=Core Instance" "Name=tag:stackname,Values=HelloWebuiTest" "Name=instance-state-name,Values=running" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
    - TESTER_IP="$(aws ec2 describe-instances --filters "Name=tag:Role,Values=Test Instance" "Name=tag:stackname,Values=HelloWebuiTest" "Name=instance-state-name,Values=running" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
    - java -jar ./hellowebui-functional-test/target/hellowebui-functional-test-0.0.1-SNAPSHOT.jar $SUT_IP $TESTER_IP

    - tower-cli job launch 
      --job-template site-deprov 
      --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=HelloWebuiTest cli_deploymentenv=test cli_action=test cli_ci_pipeline_id='$CI_PIPELINE_ID'"
  only:
    - master
  except:
    - triggers

deploy_staging:
  <<: *deploy
  stage: review application
  variables:
    ENV_TOWER_CLI_HOST: $TOWER_CLI_HOST
    ENV_TOWER_CLI_USERNAME: $TOWER_CLI_USERNAME
    ENV_TOWER_CLI_PASSWORD: $TOWER_CLI_PASSWORD
    ENV_AWS_DEFAULT_REGION: "us-west-1"
    STACKNAME: $STACKNAME_STG
    ENVIRONMENT: staging

  environment:
    name: staging
    # url: http://userapi-apigateway-$CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME.$OPENSHIFT_DOMAIN
    on_stop: stop-staging
  only:
      - master
  except:
    - triggers

functional_regression_test_staging:
  stage: regression test deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode/maven:4.0.0
  before_script:
    - tower-cli config host $TOWER_CLI_HOST
    - tower-cli config username $TOWER_CLI_USERNAME
    - tower-cli config password $TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION="us-west-1"
  script:
    - tower-cli job launch 
      --job-template site-prov 
      --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME_STG cli_deploymentenv=staging cli_action=test cli_ci_pipeline_id='$CI_PIPELINE_ID'" 
      --tags "provision,provision-test,setup-test" 
      --wait

    - mvn clean package -f ./hellowebui-functional-test
    - SUT_IP="$(aws ec2 describe-instances --filters "Name=tag:Role,Values=Core Instance" "Name=tag:stackname,Values=$STACKNAME_STG" "Name=instance-state-name,Values=running" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
    - TESTER_IP="$(aws ec2 describe-instances --filters "Name=tag:Role,Values=Test Instance" "Name=tag:stackname,Values=$STACKNAME_STG" "Name=instance-state-name,Values=running" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
    - java -jar ./hellowebui-functional-test/target/hellowebui-functional-test-0.0.1-SNAPSHOT.jar $SUT_IP $TESTER_IP

    - tower-cli job launch 
      --job-template site-prov --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME_STG cli_deploymentenv=staging cli_action=deployment cli_ci_pipeline_id='$CI_PIPELINE_ID'" 
      --tags "provision" 
      --wait
  only:
    - master
  except:
    - triggers

stop-staging:
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode:3.0.0
  stage: cleanup
  variables:
    ENV_TOWER_CLI_HOST: $TOWER_CLI_HOST
    ENV_TOWER_CLI_USERNAME: $TOWER_CLI_USERNAME
    ENV_TOWER_CLI_PASSWORD: $TOWER_CLI_PASSWORD
    ENV_AWS_DEFAULT_REGION: "us-west-1"
    STACKNAME: $STACKNAME_STG
  before_script:
    - tower-cli config host $ENV_TOWER_CLI_HOST
    - tower-cli config username $ENV_TOWER_CLI_USERNAME
    - tower-cli config password $ENV_TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false
    - export AWS_DEFAULT_REGION=$ENV_AWS_DEFAULT_REGION
  script:
    - cd ./infrastructure
    - tower-cli job launch --job-template site-deprov --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME cli_deploymentenv=staging cli_action=deployment cli_ci_pipeline_id='$CI_PIPELINE_ID'"
    # - ansible-playbook site-deprov --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME cli_action=deployment cli_ci_pipeline_id='$CI_PIPELINE_ID'"
  when: manual
  environment:
    name: staging
    action: stop
  only:
      - master
  except:
    - triggers

stop-review:
  image: iaghcp-docker-technical-architecture.jfrog.io/infrastructureascode:3.0.0
  stage: cleanup
  variables:
    ENV_TOWER_CLI_HOST: $TOWER_CLI_HOST
    ENV_TOWER_CLI_USERNAME: $TOWER_CLI_USERNAME
    ENV_TOWER_CLI_PASSWORD: $TOWER_CLI_PASSWORD
    ENV_AWS_DEFAULT_REGION: "us-west-1"
    STACKNAME: $CI_PROJECT_NAME-$CI_BUILD_REF_NAME
  before_script:
    - tower-cli config host $ENV_TOWER_CLI_HOST
    - tower-cli config username $ENV_TOWER_CLI_USERNAME
    - tower-cli config password $ENV_TOWER_CLI_PASSWORD
    - tower-cli config verify_ssl false

    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}

    - export AWS_DEFAULT_REGION=$ENV_AWS_DEFAULT_REGION
  script:
    - cd ./infrastructure
    - tower-cli job launch --job-template site-deprov --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME cli_deploymentenv=$ENVIRONMENT cli_ci_pipeline_id='$CI_PIPELINE_ID'"
    # - ansible-playbook site-deprov --extra-vars="cli_ec2region=$AWS_DEFAULT_REGION cli_aws_access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID} cli_aws_secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY} cli_tf=./terraform cli_stackname=$STACKNAME cli_ci_pipeline_id='$CI_PIPELINE_ID'"
  when: manual
  environment:
    name: $CI_BUILD_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master